"use strict";(()=>{var e={};e.id=442,e.ids=[442],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},7645:(e,t,r)=>{r.r(t),r.d(t,{config:()=>l,default:()=>s,routeModule:()=>p});var n={};r.r(n),r.d(n,{default:()=>d});var o=r(6794),a=r(6114),i=r(6249);let u=new(r(3524)).PrismaClient;async function d(e,t){let{id:r}=e.query;if("GET"===e.method)try{let e=await u.payRate.findMany({where:{employeeID:parseInt(r)},orderBy:{effectiveDate:"desc"}});return t.status(200).json(e)}catch(e){return console.error("Failed to fetch pay rate history:",e),t.status(500).json({error:"Failed to fetch pay rate history"})}t.setHeader("Allow",["GET"]),t.status(405).json({error:`Method ${e.method} not allowed`})}let s=(0,i.l)(n,"default"),l=(0,i.l)(n,"config"),p=new o.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/employee/[id]",pathname:"/api/employee/[id]",bundlePath:"",filename:""},userland:n})},6114:(e,t)=>{var r;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE",e.IMAGE="IMAGE"}(r||(r={}))},6794:(e,t,r)=>{e.exports=r(145)}};var t=require("../../../webpack-api-runtime.js");t.C(e);var r=t(t.s=7645);module.exports=r})();